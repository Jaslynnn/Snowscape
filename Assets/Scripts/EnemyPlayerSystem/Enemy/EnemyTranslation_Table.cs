using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class EnemyTranslationTableEntry
{
    public string EnemyName;
    public GameObject EnemyObject = null;
    public int EnemyHealth;
    public enum EnemyType { Nothing, Fiend, FiendNest, Breakable };
    public EnemyType Type;
    
    public enum ItemsDropped { Snowcube, Bone, Eyeball, Meat, Tail, Coins };
    public List<ItemsDropped> itemDroppedList;


    public override bool Equals(object obj)
    {
        if (obj is EnemyTranslationTableEntry other)
        {
            return this.EnemyObject == other.EnemyObject; // Compare based on unique object reference or any other logic
        }
        return false;
    }

    public override int GetHashCode()
    {
        return EnemyObject.GetHashCode(); // Ensure this matches your comparison logic
    }

    public EnemyTranslationTableEntry( GameObject enemyObject , int health)
    {
        this.EnemyObject = enemyObject;
        this.EnemyHealth = health;
    }

    public EnemyTranslationTableEntry(  string enemyName , GameObject enemyObject, EnemyType enemyType ,int health) 
    { 
        this.EnemyName = enemyName;
        this.EnemyObject = enemyObject;
        this.EnemyHealth = health;
        this.Type = enemyType;
    }



}
[CreateAssetMenu(menuName = "RPG/Enemy Table", fileName = "EnemyTranslation_Table")]
public class EnemyTranslation_Table : BaseEnemyTranslation
{
    [SerializeField] List<EnemyTranslationTableEntry> Table;

    public override EnemyTranslationTableEntry TakeDamage(GameObject enemyObject, int damage, string enemyTag)
    {

        foreach (EnemyTranslationTableEntry tableEntry in Table)
        {

            if (enemyTag == tableEntry.EnemyName)
            {
                EnemyTranslationTableEntry enemy01 = new EnemyTranslationTableEntry(tableEntry.EnemyName, enemyObject, tableEntry.Type, tableEntry.EnemyHealth);

                //Debug.Log("This is the item's health before deduction " + enemy01.EnemyHealth);
                enemy01.EnemyHealth -= damage;
               // Debug.Log("This is the item's health after deduction " + enemy01.EnemyHealth);
                //when the player hits, create a class for it with name, health, and deduct the health by 1 per second by a cooldown timing generated by the players attack, add it to a list of classes
                //ItemHealth = tableEntry.health - damage;

                //Debug.Log(EnemyHealth);
                return enemy01;
                //returns the health of that item


            }



        }


        //if the collision.tag == name of the Item (Write for loop to find)
        //if XP points >0 , add points to the player
        return null;
        

    }

    public override string DropItem(List<ItemsDropped> itemDroppedList)
    {

        foreach (EnemyTranslationTableEntry tableEntry in Table)
        {
           
              //for the length of the list, choose a random number and make that

          



        }


        //if the collision.tag == name of the Item (Write for loop to find)
        //if XP points >0 , add points to the player
        throw new System.NotImplementedException();

    }


}